1). An integer is defined to be an even subset of another integer n if every even factor of m is also a
factor of n. For example 18 is an even subset of 12 because the even factors of 18 are 2 and 6 and
these are both factors of 12. But 18 is not an even subset of 32 because 6 is not a factor of 32.
Write a function with signature int isEvenSubset(int m, int n) that returns 1 if m is an even subset
of n, otherwise it returns 0.
2). Given a positive integer k, another positive integer n is said to have k-small factors if n can be
written as a product u*v where u and v are both less than k. For instance, 20 has 10-small factors
since both 4 and 5 are less than 10 and 4*5 = 20. (For the same reason, it is also true to say that 20
has 6-small factors, 7-small factors, 8-small factors, etc). However, 22 does not have 10-small
factors since the only way to factor 22 is as 22 = 2 * 11, and 11 is not less than 10.
Write a function hasKSmallFactors with signatuare
boolean hasKSmallFactors(int k, int n)
which returns true if n has k-small factors. The function should return false if either k or n is not
positive.
Examples:
hasKSmallFactors(7, 30) is true (since 5*6 = 30 and 5 &lt; 7, 6 &lt; 7).
hasKSmallFactors(6, 14) is false (since the only way to factor 14 is 2*7 = 14 and 7 not less than 6)
hasKSmallFactors(6, 30) is false (since 5*6 = 30, 6 not less than 6; 3 * 10 = 30, 10 not less than 6; 2 *
15 = 30, 15 not less than 6)
3) A twinoid is defined to be an array that has exactly two even values that are adjacent to one
another. For example {3, 3, 2, 6, 7} is a twinoid array because it has exactly two even values (2 and
6) and they are adjacent to one another. The following arrays are not twinoid arrays.
{3, 3, 2, 6, 6, 7} because it has three even values.
{3, 3, 2, 7, 6, 7} because the even values are not adjacent to one another
{3, 8, 5, 7, 3} because it has only one even value.
Write a function named isTwinoid that returns 1 if its array argument is a twinoid array. Otherwise
it returns 0.
If you are programming in Java or C#, the function signature is
int isTwinoid (int [ ] a);
If you are programming in C or C++, the function signature is
int isTwinoid(int a[ ], int len) where len is the number of elements in the array.
4)A balanced array is defined to be an array where for every value n in the array, -n also is in the
array. For example {-2, 3, 2, -3} is a balanced array. So is {-2, 2, 2, 2}. But {-5, 2, -2} is not
because 5 is not in the array.
Write a function named isBalanced that returns 1 if its array argument is a balanced array.
Otherwise it returns 0.
If you are programming in Java or C#, the function signature is
int isBalanced (int [ ] a);
If you are programming in C or C++, the function signature is
int isBalanced(int a[ ], int len) where len is the number of elements in the array.
5) 2. Write a function fill with signature 
int[ ] fill(int[ ] arr, int k, int n) 
which does the following: It returns an integer array arr2 of length n whose first k elements
are the same as the first k elements of arr, and whose remaining elements consist of
repeating blocks of the first k elements.  You can assume array arr has at least k
elements. The function should return null if either k or n is not positive. 
Examples: 
fill({1,2,3,5, 9, 12,-2,-1}, 3, 10) returns {1,2,3,1,2,3,1,2,3,1}.
fill({4, 2, -3, 12}, 1, 5)  returns {4, 4, 4, 4, 4}.
fill({2, 6, 9, 0, -3}, 0, 4) returns null.
6) 3. An array is said to be hollow if it contains 3 or more zeroes in the middle that are
preceded and followed by the same number of non-zero elements. Write a function
named isHollow that  accepts an integer array and returns 1 if it is a hollow array,
otherwise it returns 0 
Examples:  isHollow({1,2,4,0,0,0,3,4,5}) returns 1.  isHollow ({1,2,0,0,0,3,4,5})
returns 0. isHollow ({1,2,4,9, 0,0,0,3,4, 5}) returns 0.  isHollow ({1,2, 0,0, 3,4}) returns 0. 
If you are programming in Java or C#, the function signature is
int isHollow(int[ ] a). 
If you are C or C++ programmer
int isHollow(int[ ] a, int len)            
where len is the number of elements in the array.  
